use aiken/builtin.{
  bls12_381_final_verify, bls12_381_g1_add, bls12_381_g1_scalar_mul,
  bls12_381_g1_uncompress, bls12_381_g2_uncompress, bls12_381_miller_loop,
  bls12_381_mul_miller_loop_result,
}
use aiken/list.{foldl, head, map, map2}
use aiken_bilinear_accumulator/poly.{get_final_poly}

const g1_zero_bs =
  #"c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

fn get_g1_commitment(setup: List<G1Element>, subset: List<Int>) -> G1Element {
  let g1_zero = bls12_381_g1_uncompress(g1_zero_bs)

  let subset_in_g1 =
    map2(
      get_final_poly(subset),
      setup,
      fn(sb, st) { bls12_381_g1_scalar_mul(sb, st) },
    )

  foldl(subset_in_g1, g1_zero, fn(a, b) { bls12_381_g1_add(a, b) })
}

pub fn check_membership(
  setup: List<G1Element>,
  acc: G2Element,
  subset: List<Int>,
  proof: G2Element,
) -> Bool {
  expect Some(g1) = head(setup)

  let lhs = bls12_381_miller_loop(g1, acc)
  let rhs = bls12_381_miller_loop(get_g1_commitment(setup, subset), proof)
  bls12_381_final_verify(lhs, rhs)
}

pub fn check_nonmembership(
  setup: List<G1Element>,
  g2: G2Element,
  acc: G2Element,
  disjoint: List<Int>,
  proof: (G1Element, G2Element),
) -> Bool {
  expect Some(g1) = head(setup)

  let lhs1 = bls12_381_miller_loop(proof.1st, acc)
  let lhs2 =
    bls12_381_miller_loop(get_g1_commitment(setup, disjoint), proof.2nd)
  let lhs = bls12_381_mul_miller_loop_result(lhs1, lhs2)
  let rhs = bls12_381_miller_loop(g1, g2)

  bls12_381_final_verify(lhs, rhs)
}

test check_membership_one_element() {
  // CRS G1:
  let crs_g1 =
    [
      #"97f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb",
      #"b0e7791fb972fe014159aa33a98622da3cdc98ff707965e536d8636b5fcc5ac7a91a8c46e59a00dca575af0f18fb13dc",
    ]

  // Accumulator:
  let accumulator =
    #"89ba08d8603d038bebff491a4bd13c0c0b7b543424b496dd5775c7b149088407edca780f42ab0d5981de4453a28e10d51972771a064191226ae7ce19ced6fc2507a6ca1da26b45e57f32cf0b971c1db8bc288d9d46bede1d6245f19d0677f0de"

  // Subset:
  let subset =
    [12789432613480778637037173304406804881209921151007582396232510502256]

  // Proof:
  let proof =
    #"aa97628889f6680ece8ba09b4603790b9c9bcf83711e9aab2bce876ad84317517f042f21e014ecc3f9733bc4b9b995271662de7a75349d92645bdb178d6048cde14112667679510fdcc96577dede5df558b95a21fb3e794bbc511f6824baacc5"

  check_membership(
    map(crs_g1, fn(x) { bls12_381_g1_uncompress(x) }),
    bls12_381_g2_uncompress(accumulator),
    subset,
    bls12_381_g2_uncompress(proof),
  )
}

test check_membership_five_elements() {
  // CRS G1:
  let crs_g1 =
    [
      #"97f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb",
      #"b0e7791fb972fe014159aa33a98622da3cdc98ff707965e536d8636b5fcc5ac7a91a8c46e59a00dca575af0f18fb13dc",
      #"acb58c81ae0cae2e9d4d446b730922239923c345744eee58efaadb36e9a0925545b18a987acf0bad469035b291e37269",
      #"82681717d96c5d63a931c4ee8447ca0201c5951f516a876e78dcbc1689b9c4cf57a00a61c6fd0d92361a4b723c307e2d",
      #"adb357468d28f2c222024e3745e6197336f10de2e53ee2376bc79e2f0f2313e4509e7512b221d6050364d1df338d1f06",
      #"a91d6c2d1007eb2def5f8657f831167a98e5969c8f14b628e0ddbab7cfc53601c81df6e969aca7061344d5e8323ad90d",
    ]

  // Accumulator:
  let accumulator =
    #"8020dde6bd6ccf037108ed8133b1952cbc8cfcc309a3528e64fa30e4af49af4c560fef7393976d0b3ba0b41d15f139c20fbe92bbf753687af2e40231a0c74fcf1e56f8da01b95544d6d8211cc00057b2ca88a360fe68e6336a2b45b1e410f4ed"

  // Subset:
  let subset =
    [
      19874808694258407290288956682657456416247678140468316013133188346894,
      4882738387601840090135160666661831546208338296525627176796097467867,
      26877058694716127944468771910721019728324977372682046660332048277709,
      25738604828238797519637704603724215329261048672082794299419828644636,
      13798703337440698527163162131782246777204282560893896118852914668023,
    ]

  // Proof:
  let proof =
    #"881e5a8a2f83ce5efa374234268e8895d9b8f5f46d8b2e86ab261e35e6befa605a43aed19888d952930c94176888aefd0098fa94f521c00839b284f4252a30b8eb6de05ffc9e14fd43881b8c40d6781ef75c3f30e82c83b2c45da6d6fee551da"
  check_membership(
    map(crs_g1, fn(x) { bls12_381_g1_uncompress(x) }),
    bls12_381_g2_uncompress(accumulator),
    subset,
    bls12_381_g2_uncompress(proof),
  )
}

test check_membership_ten_elements() {
  // CRS G1:
  let crs_g1 =
    [
      #"97f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb",
      #"b0e7791fb972fe014159aa33a98622da3cdc98ff707965e536d8636b5fcc5ac7a91a8c46e59a00dca575af0f18fb13dc",
      #"acb58c81ae0cae2e9d4d446b730922239923c345744eee58efaadb36e9a0925545b18a987acf0bad469035b291e37269",
      #"82681717d96c5d63a931c4ee8447ca0201c5951f516a876e78dcbc1689b9c4cf57a00a61c6fd0d92361a4b723c307e2d",
      #"adb357468d28f2c222024e3745e6197336f10de2e53ee2376bc79e2f0f2313e4509e7512b221d6050364d1df338d1f06",
      #"a91d6c2d1007eb2def5f8657f831167a98e5969c8f14b628e0ddbab7cfc53601c81df6e969aca7061344d5e8323ad90d",
      #"829a601a644878b0ac6d06ed7f000c163200909eedbbd32a956485b3c7ae398877c6a3625de36cb44a7e3b1b9f63234d",
      #"8245ceb0cb176dfae3ef880a936cc8afc5772dc79ade0e25d08aef0ea067c1d355732658daf6e72646c459fafc48f567",
      #"96903ac25c513f9559a3769678b84169b02ae04706a5f47440995b41c6350dcf18f3f26db06a16184f1b7cba70cb9cca",
      #"ae095cae1961131f64ea7fc962c9f2a6c1891d6d26c9e7f6d59d8c93aded2e4acdb6290361d2d99bef5f2de4fc9cabc7",
      #"92e4f628c663ac0e56057cf0758d7b588994f068ebb2d6c371a2b1dde93a3cb59f15725c5a8eb2629b56aa8f5a063c5b",
    ]

  // Accumulator:
  let accumulator =
    #"903e63eae8cce28e5235a2ef8459fe7805a1107078f44ddc1df7bdadd59e9be88a4781aa60096ca0930b36d61c1b552901608c46882e69a0a8d0ce2c776144b3d6f845b3c8257b76aaf4373fa306ca6f797589c10693daac66bee274c38f5110"

  // Subset:
  let subset =
    [
      12894762556481530505037615933060490631720652499230414311373614706551,
      6910320457229091536875112769088775802122817875189078928032651722531,
      11839163260365520944665591138724969382557204444194499664949826517623,
      10265652816701413634035670941759770384122355102280143627141786854522,
      23823763123838062854868700158770536480801156860361968763240195923058,
      10891349521856627803085398419384011750804999832867692644035415665510,
      15194023114231967107093775578192212071800639491369827337981892516420,
      11213048864234613131460834508248643517144632246424513014679431509604,
      19385163455853660801309946114884652941258461091767315438945959306953,
      11520346871379370929669966028350292285747482584563044211023543693931,
    ]

  // Proof:
  let proof =
    #"82193557ebd57d56ef17e672f7580f075a8da8c144a53d01f00853eaa5cb1e2e58a1adbeee021ed7ba8d999c3aa49f270b42bf5c20f937f0a040991c8fa53d0897b36106b162a89912ef8d944b1b3d92107fba42403ece931ddea88af6fa93a9"

  check_membership(
    map(crs_g1, fn(x) { bls12_381_g1_uncompress(x) }),
    bls12_381_g2_uncompress(accumulator),
    subset,
    bls12_381_g2_uncompress(proof),
  )
}
